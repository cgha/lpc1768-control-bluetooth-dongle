<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\keil_output\nxpUSBlib_LPC17xx_Host.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\keil_output\nxpUSBlib_LPC17xx_Host.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 4.1 [Build 894]: Last Updated: Mon Oct 29 13:55:09 2012
<BR><P>
<H3>Maximum Stack Usage =       1404 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; BluetoothAdapter_USBTask &rArr; Bluetooth_ProcessPacket &rArr; Bluetooth_HCI_ProcessDataPacket &rArr; Bluetooth_L2CAP_ProcessPacket &rArr; EVENT_Bluetooth_DataReceived &rArr; SDP_ProcessPacket &rArr; SDP_ServiceSearchAttribute &rArr; SDP_SendFrame &rArr; Bluetooth_L2CAP_SendPacket &rArr; Bluetooth_HCI_SendPacket &rArr; CALLBACK_Bluetooth_SendPacket &rArr; HcdDataTransfer &rArr; QueueITDs &rArr; QueueOneITD &rArr; AllocItdForEd &rArr; __aeabi_memclr4
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[37]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">NMI_Handler</a><BR>
 <LI><a href="#[5]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">HardFault_Handler</a><BR>
 <LI><a href="#[6]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">MemManage_Handler</a><BR>
 <LI><a href="#[7]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">BusFault_Handler</a><BR>
 <LI><a href="#[8]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">UsageFault_Handler</a><BR>
 <LI><a href="#[9]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SVC_Handler</a><BR>
 <LI><a href="#[a]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">DebugMon_Handler</a><BR>
 <LI><a href="#[b]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">PendSV_Handler</a><BR>
 <LI><a href="#[c]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">SysTick_Handler</a><BR>
 <LI><a href="#[23]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">ADC_IRQHandler</a><BR>
 <LI><a href="#[101]">SDP_CheckUUIDMatch</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[101]">SDP_CheckUUIDMatch</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[23]">ADC_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[24]">BOD_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[7]">BusFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2f]">CANActivity_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[26]">CAN_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[34]">DComp_NextInterfaceBluetoothDataEndpoint</a> from bluetoothadapter.o(i.DComp_NextInterfaceBluetoothDataEndpoint) referenced from bluetoothadapter.o(i.BluetoothAdapter_ConfigurePipes)
 <LI><a href="#[27]">DMA_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1f]">EINT0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[20]">EINT1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[21]">EINT2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[22]">EINT3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[29]">ENET_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[17]">I2C0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[18]">I2C1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[19]">I2C2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[28]">I2S_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2b]">MCPWM_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[6]">MemManage_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1d]">PLL0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2d]">PLL1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[16]">PWM1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2c]">QEI_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2a]">RIT_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1e]">RTC_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[35]">Reset_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1a]">SPI_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1b]">SSP0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1c]">SSP1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[30]">SystemInit</a> from system_lpc17xx.o(i.SystemInit) referenced from startup_lpc17xx.o(.text)
 <LI><a href="#[e]">TIMER0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[f]">TIMER1_IRQHandler</a> from bsp_mcb1700.o(i.TIMER1_IRQHandler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[10]">TIMER2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[11]">TIMER3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[12]">UART0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[13]">UART1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[14]">UART2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[15]">UART3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2e]">USBActivity_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[25]">USB_IRQHandler</a> from hal_lpc17xx.o(i.USB_IRQHandler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[d]">WDT_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[36]">__main</a> from __main.o(!!!main) referenced from startup_lpc17xx.o(.text)
 <LI><a href="#[33]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[32]">fputc</a> from bsp.o(i.fputc) referenced from _printf_char_file.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[36]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[38]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[3a]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[130]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[131]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[132]"></a>__decompress</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[133]"></a>__decompress0</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[134]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[53]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[3b]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[3d]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[135]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[3f]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init &rArr; _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[136]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[137]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000028))

<P><STRONG><a name="[138]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[139]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[13a]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[13b]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[13c]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[13d]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[13e]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[13f]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))

<P><STRONG><a name="[140]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[141]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[142]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[143]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[144]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[145]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))

<P><STRONG><a name="[146]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[147]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[148]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[48]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[149]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[14a]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[14b]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[14c]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[14d]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[14e]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[39]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[14f]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[41]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[43]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_li &rArr; __rt_lib_init &rArr; _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[150]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[44]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 1404 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; BluetoothAdapter_USBTask &rArr; Bluetooth_ProcessPacket &rArr; Bluetooth_HCI_ProcessDataPacket &rArr; Bluetooth_L2CAP_ProcessPacket &rArr; EVENT_Bluetooth_DataReceived &rArr; SDP_ProcessPacket &rArr; SDP_ServiceSearchAttribute &rArr; SDP_SendFrame &rArr; Bluetooth_L2CAP_SendPacket &rArr; Bluetooth_HCI_SendPacket &rArr; CALLBACK_Bluetooth_SendPacket &rArr; HcdDataTransfer &rArr; QueueITDs &rArr; QueueOneITD &rArr; AllocItdForEd &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[151]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[61]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[47]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[152]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[49]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[35]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))

<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>CANActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>ENET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>PLL0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>PLL1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>QEI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>RIT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>USBActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[153]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[154]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[12d]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_divisors
</UL>

<P><STRONG><a name="[155]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[12c]"></a>__aeabi_llsl</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_divisors
</UL>

<P><STRONG><a name="[156]"></a>_ll_shift_l</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[12e]"></a>__aeabi_llsr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_divisors
</UL>

<P><STRONG><a name="[157]"></a>_ll_ushift_r</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_RFCOMM_ChannelStateChange
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_Bluetooth_DataReceived
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_Bluetooth_ConnectionStateChange
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_Bluetooth_ChannelStateChange
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALLBACK_Bluetooth_ConnectionRequest
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALLBACK_Bluetooth_ChannelRequest
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_USB_Host_DeviceUnattached
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_USB_Host_DeviceEnumerationFailed
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_USB_Host_DeviceEnumerationComplete
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_USB_Host_DeviceAttached
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_ProcessMultiplexerCommand
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_ProcessSABM
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_ProcessPNCommand
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_ProcessMSCommand
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_ProcessPacket
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_Manage
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_HCI_ProcessEventPacket
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_HCI_Manage
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_ProcessPacket
</UL>

<P><STRONG><a name="[4e]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[4f]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[4d]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[3c]"></a>_printf_int_hex</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[158]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>__printf</STRONG> (Thumb, 310 bytes, Stack size 40 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[83]"></a>strlcpy</STRONG> (Thumb, 140 bytes, Stack size 20 bytes, strlcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = strlcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_HCI_ProcessEventPacket
</UL>

<P><STRONG><a name="[77]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_CheckUUIDMatch
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_HCI_FindConnection
</UL>

<P><STRONG><a name="[82]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_HCI_ProcessEventPacket
</UL>

<P><STRONG><a name="[57]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_SendFrame
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_SendControlFrame
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ServiceSearch
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_GetUUIDList
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_GetAttributeList
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_AddAttributeToResponse
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_SendPacket
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_SendSignalPacket
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_HCI_SendPacket
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_HCI_SendControlPacket
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_HCI_ProcessEventPacket
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[54]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[159]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_NotifyHCIDisconnection
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_Manage
</UL>

<P><STRONG><a name="[56]"></a>__rt_memmove</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[15a]"></a>__memmove_lastfew</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_v6.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_Init
</UL>

<P><STRONG><a name="[59]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[15b]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OHciHostInit
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocItdForEd
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocGtdForEd
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocEd
</UL>

<P><STRONG><a name="[15c]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[15d]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[15e]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[15f]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[160]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[50]"></a>_printf_int_common</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[5b]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[5c]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[3e]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[4c]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[55]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[161]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[162]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[163]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[164]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[165]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[58]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[166]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[42]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[46]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[167]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[168]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[12f]"></a>__rt_fp_status_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_fp_status_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[69]"></a>BluetoothAdapter_ConfigurePipes</STRONG> (Thumb, 226 bytes, Stack size 48 bytes, bluetoothadapter.o(i.BluetoothAdapter_ConfigurePipes))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = BluetoothAdapter_ConfigurePipes &rArr; Pipe_ConfigurePipe &rArr; HcdOpenPipe &rArr; AllocEd &rArr; AllocItdForEd &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pipe_ConfigurePipe
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetNextDescriptorOfType
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetNextDescriptorComp
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_USB_Host_DeviceEnumerationComplete
</UL>

<P><STRONG><a name="[6d]"></a>BluetoothAdapter_PostConfiguration</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bluetoothadapter.o(i.BluetoothAdapter_PostConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BluetoothAdapter_PostConfiguration &rArr; Bluetooth_Init &rArr; EVENT_Bluetooth_InitServices &rArr; RFCOMM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_USB_Host_DeviceEnumerationComplete
</UL>

<P><STRONG><a name="[6f]"></a>BluetoothAdapter_TickElapsed</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bluetoothadapter.o(i.BluetoothAdapter_TickElapsed))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BluetoothAdapter_TickElapsed &rArr; Bluetooth_TickElapsed
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_TickElapsed
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[71]"></a>BluetoothAdapter_USBTask</STRONG> (Thumb, 214 bytes, Stack size 8 bytes, bluetoothadapter.o(i.BluetoothAdapter_USBTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 1404 + Unknown Stack Size
<LI>Call Chain = BluetoothAdapter_USBTask &rArr; Bluetooth_ProcessPacket &rArr; Bluetooth_HCI_ProcessDataPacket &rArr; Bluetooth_L2CAP_ProcessPacket &rArr; EVENT_Bluetooth_DataReceived &rArr; SDP_ProcessPacket &rArr; SDP_ServiceSearchAttribute &rArr; SDP_SendFrame &rArr; Bluetooth_L2CAP_SendPacket &rArr; Bluetooth_HCI_SendPacket &rArr; CALLBACK_Bluetooth_SendPacket &rArr; HcdDataTransfer &rArr; QueueITDs &rArr; QueueOneITD &rArr; AllocItdForEd &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pipe_IsINReceived
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pipe_Read_Stream_LE
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_ProcessPacket
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_ManageConnections
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[76]"></a>Bluetooth_HCI_FindConnection</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, bluetoothhci.o(i.Bluetooth_HCI_FindConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Bluetooth_HCI_FindConnection &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_SendPacket
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_Manage
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_HCI_ProcessEventPacket
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_HCI_ProcessDataPacket
</UL>

<P><STRONG><a name="[87]"></a>Bluetooth_HCI_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, bluetoothhci.o(i.Bluetooth_HCI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bluetooth_HCI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_Init
</UL>

<P><STRONG><a name="[78]"></a>Bluetooth_HCI_Manage</STRONG> (Thumb, 378 bytes, Stack size 16 bytes, bluetoothhci.o(i.Bluetooth_HCI_Manage))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = Bluetooth_HCI_Manage &rArr; Bluetooth_HCI_SendControlPacket &rArr; CALLBACK_Bluetooth_SendPacket &rArr; HcdDataTransfer &rArr; QueueITDs &rArr; QueueOneITD &rArr; AllocItdForEd &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_Bluetooth_InitComplete
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_HCI_SendControlPacket
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_ManageConnections
</UL>

<P><STRONG><a name="[7b]"></a>Bluetooth_HCI_ProcessDataPacket</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bluetoothhci.o(i.Bluetooth_HCI_ProcessDataPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 1380 + Unknown Stack Size
<LI>Call Chain = Bluetooth_HCI_ProcessDataPacket &rArr; Bluetooth_L2CAP_ProcessPacket &rArr; EVENT_Bluetooth_DataReceived &rArr; SDP_ProcessPacket &rArr; SDP_ServiceSearchAttribute &rArr; SDP_SendFrame &rArr; Bluetooth_L2CAP_SendPacket &rArr; Bluetooth_HCI_SendPacket &rArr; CALLBACK_Bluetooth_SendPacket &rArr; HcdDataTransfer &rArr; QueueITDs &rArr; QueueOneITD &rArr; AllocItdForEd &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_ProcessPacket
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_HCI_FindConnection
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_ProcessPacket
</UL>

<P><STRONG><a name="[7d]"></a>Bluetooth_HCI_ProcessEventPacket</STRONG> (Thumb, 1318 bytes, Stack size 48 bytes, bluetoothhci.o(i.Bluetooth_HCI_ProcessEventPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 924 + Unknown Stack Size
<LI>Call Chain = Bluetooth_HCI_ProcessEventPacket &rArr; Bluetooth_L2CAP_NotifyHCIDisconnection &rArr; EVENT_Bluetooth_ChannelStateChange &rArr; RFCOMM_ChannelOpened &rArr; RFCOMM_SendFrame &rArr; Bluetooth_L2CAP_SendPacket &rArr; Bluetooth_HCI_SendPacket &rArr; CALLBACK_Bluetooth_SendPacket &rArr; HcdDataTransfer &rArr; QueueITDs &rArr; QueueOneITD &rArr; AllocItdForEd &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_Bluetooth_ConnectionStateChange
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALLBACK_Bluetooth_ConnectionRequest
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_NotifyHCIDisconnection
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_HCI_SendControlPacket
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_HCI_FindConnection
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_HCI_NewConnection
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlcpy
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_ProcessPacket
</UL>

<P><STRONG><a name="[79]"></a>Bluetooth_HCI_SendControlPacket</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, bluetoothhci.o(i.Bluetooth_HCI_SendControlPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = Bluetooth_HCI_SendControlPacket &rArr; CALLBACK_Bluetooth_SendPacket &rArr; HcdDataTransfer &rArr; QueueITDs &rArr; QueueOneITD &rArr; AllocItdForEd &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALLBACK_Bluetooth_SendPacket
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_HCI_ProcessEventPacket
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_HCI_Manage
</UL>

<P><STRONG><a name="[85]"></a>Bluetooth_HCI_SendPacket</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, bluetoothhci.o(i.Bluetooth_HCI_SendPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = Bluetooth_HCI_SendPacket &rArr; CALLBACK_Bluetooth_SendPacket &rArr; HcdDataTransfer &rArr; QueueITDs &rArr; QueueOneITD &rArr; AllocItdForEd &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALLBACK_Bluetooth_SendPacket
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_SendPacket
</UL>

<P><STRONG><a name="[9b]"></a>Bluetooth_HCI_TickElapsed</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, bluetoothhci.o(i.Bluetooth_HCI_TickElapsed))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_TickElapsed
</UL>

<P><STRONG><a name="[6e]"></a>Bluetooth_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bluetooth.o(i.Bluetooth_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Bluetooth_Init &rArr; EVENT_Bluetooth_InitServices &rArr; RFCOMM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_Bluetooth_InitServices
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_HCI_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluetoothAdapter_PostConfiguration
</UL>

<P><STRONG><a name="[8b]"></a>Bluetooth_L2CAP_FindChannel</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, bluetoothl2cap.o(i.Bluetooth_L2CAP_FindChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Bluetooth_L2CAP_FindChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_Signal_DisconnectRsp
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_Signal_ConnectRsp
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_Signal_ConfigRsp
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_Signal_ConfigReq
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_ProcessPacket
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_Manage
</UL>

<P><STRONG><a name="[88]"></a>Bluetooth_L2CAP_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, bluetoothl2cap.o(i.Bluetooth_L2CAP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bluetooth_L2CAP_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_Init
</UL>

<P><STRONG><a name="[8a]"></a>Bluetooth_L2CAP_Manage</STRONG> (Thumb, 1352 bytes, Stack size 40 bytes, bluetoothl2cap.o(i.Bluetooth_L2CAP_Manage))
<BR><BR>[Stack]<UL><LI>Max Depth = 1108 + Unknown Stack Size
<LI>Call Chain = Bluetooth_L2CAP_Manage &rArr; Bluetooth_L2CAP_SendSignalPacket &rArr; Bluetooth_L2CAP_SendPacket &rArr; Bluetooth_HCI_SendPacket &rArr; CALLBACK_Bluetooth_SendPacket &rArr; HcdDataTransfer &rArr; QueueITDs &rArr; QueueOneITD &rArr; AllocItdForEd &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_Bluetooth_ChannelStateChange
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_FindChannel
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_SendSignalPacket
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_NewEvent
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_HCI_FindConnection
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_ManageConnections
</UL>

<P><STRONG><a name="[81]"></a>Bluetooth_L2CAP_NotifyHCIDisconnection</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, bluetoothl2cap.o(i.Bluetooth_L2CAP_NotifyHCIDisconnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 876 + Unknown Stack Size
<LI>Call Chain = Bluetooth_L2CAP_NotifyHCIDisconnection &rArr; EVENT_Bluetooth_ChannelStateChange &rArr; RFCOMM_ChannelOpened &rArr; RFCOMM_SendFrame &rArr; Bluetooth_L2CAP_SendPacket &rArr; Bluetooth_HCI_SendPacket &rArr; CALLBACK_Bluetooth_SendPacket &rArr; HcdDataTransfer &rArr; QueueITDs &rArr; QueueOneITD &rArr; AllocItdForEd &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_Bluetooth_ChannelStateChange
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_HCI_ProcessEventPacket
</UL>

<P><STRONG><a name="[90]"></a>Bluetooth_L2CAP_OpenChannel</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, bluetoothl2cap.o(i.Bluetooth_L2CAP_OpenChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Bluetooth_L2CAP_OpenChannel &rArr; Bluetooth_L2CAP_NewChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_NewEvent
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_NewChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_Bluetooth_ConnectionStateChange
</UL>

<P><STRONG><a name="[7c]"></a>Bluetooth_L2CAP_ProcessPacket</STRONG> (Thumb, 412 bytes, Stack size 40 bytes, bluetoothl2cap.o(i.Bluetooth_L2CAP_ProcessPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 1364 + Unknown Stack Size
<LI>Call Chain = Bluetooth_L2CAP_ProcessPacket &rArr; EVENT_Bluetooth_DataReceived &rArr; SDP_ProcessPacket &rArr; SDP_ServiceSearchAttribute &rArr; SDP_SendFrame &rArr; Bluetooth_L2CAP_SendPacket &rArr; Bluetooth_HCI_SendPacket &rArr; CALLBACK_Bluetooth_SendPacket &rArr; HcdDataTransfer &rArr; QueueITDs &rArr; QueueOneITD &rArr; AllocItdForEd &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_Bluetooth_DataReceived
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_FindChannel
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_Signal_DisconnectRsp
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_Signal_ConnectRsp
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_Signal_ConnectReq
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_Signal_ConfigRsp
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_Signal_ConfigReq
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_NewEvent
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_HCI_ProcessDataPacket
</UL>

<P><STRONG><a name="[98]"></a>Bluetooth_L2CAP_SendPacket</STRONG> (Thumb, 206 bytes, Stack size 560 bytes, bluetoothl2cap.o(i.Bluetooth_L2CAP_SendPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 764<LI>Call Chain = Bluetooth_L2CAP_SendPacket &rArr; Bluetooth_HCI_SendPacket &rArr; CALLBACK_Bluetooth_SendPacket &rArr; HcdDataTransfer &rArr; QueueITDs &rArr; QueueOneITD &rArr; AllocItdForEd &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_HCI_SendPacket
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_HCI_FindConnection
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_SendFrame
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_SendFrame
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_SendSignalPacket
</UL>

<P><STRONG><a name="[75]"></a>Bluetooth_ManageConnections</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bluetooth.o(i.Bluetooth_ManageConnections))
<BR><BR>[Stack]<UL><LI>Max Depth = 1116 + Unknown Stack Size
<LI>Call Chain = Bluetooth_ManageConnections &rArr; Bluetooth_L2CAP_Manage &rArr; Bluetooth_L2CAP_SendSignalPacket &rArr; Bluetooth_L2CAP_SendPacket &rArr; Bluetooth_HCI_SendPacket &rArr; CALLBACK_Bluetooth_SendPacket &rArr; HcdDataTransfer &rArr; QueueITDs &rArr; QueueOneITD &rArr; AllocItdForEd &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_Bluetooth_ManageServices
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_Manage
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_HCI_Manage
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluetoothAdapter_USBTask
</UL>

<P><STRONG><a name="[74]"></a>Bluetooth_ProcessPacket</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, bluetooth.o(i.Bluetooth_ProcessPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 1396 + Unknown Stack Size
<LI>Call Chain = Bluetooth_ProcessPacket &rArr; Bluetooth_HCI_ProcessDataPacket &rArr; Bluetooth_L2CAP_ProcessPacket &rArr; EVENT_Bluetooth_DataReceived &rArr; SDP_ProcessPacket &rArr; SDP_ServiceSearchAttribute &rArr; SDP_SendFrame &rArr; Bluetooth_L2CAP_SendPacket &rArr; Bluetooth_HCI_SendPacket &rArr; CALLBACK_Bluetooth_SendPacket &rArr; HcdDataTransfer &rArr; QueueITDs &rArr; QueueOneITD &rArr; AllocItdForEd &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_HCI_ProcessEventPacket
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_HCI_ProcessDataPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluetoothAdapter_USBTask
</UL>

<P><STRONG><a name="[70]"></a>Bluetooth_TickElapsed</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bluetooth.o(i.Bluetooth_TickElapsed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bluetooth_TickElapsed
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_HCI_TickElapsed
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluetoothAdapter_TickElapsed
</UL>

<P><STRONG><a name="[99]"></a>CALLBACK_Bluetooth_ChannelRequest</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, bluetoothcontrol.o(i.CALLBACK_Bluetooth_ChannelRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = CALLBACK_Bluetooth_ChannelRequest &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_Signal_ConnectReq
</UL>

<P><STRONG><a name="[7f]"></a>CALLBACK_Bluetooth_ConnectionRequest</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, bluetoothcontrol.o(i.CALLBACK_Bluetooth_ConnectionRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = CALLBACK_Bluetooth_ConnectionRequest &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_HCI_ProcessEventPacket
</UL>

<P><STRONG><a name="[84]"></a>CALLBACK_Bluetooth_SendPacket</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, bluetoothadapter.o(i.CALLBACK_Bluetooth_SendPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = CALLBACK_Bluetooth_SendPacket &rArr; HcdDataTransfer &rArr; QueueITDs &rArr; QueueOneITD &rArr; AllocItdForEd &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdDataTransfer
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pipe_Write_Stream_LE
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Host_SendControlRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_HCI_SendPacket
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_HCI_SendControlPacket
</UL>

<P><STRONG><a name="[f7]"></a>CALLBACK_RFCOMM_DataReceived</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bluetoothcontrol.o(i.CALLBACK_RFCOMM_DataReceived))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_ProcessUIH
</UL>

<P><STRONG><a name="[119]"></a>CLKPWR_ConfigPPWR</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, lpc17xx_clkpwr.o(i.CLKPWR_ConfigPPWR))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[9f]"></a>CLKPWR_GetPCLK</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lpc17xx_clkpwr.o(i.CLKPWR_GetPCLK))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLKPWR_GetPCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetPCLKSEL
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_divisors
</UL>

<P><STRONG><a name="[a0]"></a>CLKPWR_GetPCLKSEL</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lpc17xx_clkpwr.o(i.CLKPWR_GetPCLKSEL))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetPCLK
</UL>

<P><STRONG><a name="[118]"></a>DAC_UpdateValue</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc17xx_dac.o(i.DAC_UpdateValue))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[34]"></a>DComp_NextInterfaceBluetoothDataEndpoint</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, bluetoothadapter.o(i.DComp_NextInterfaceBluetoothDataEndpoint))
<BR>[Address Reference Count : 1]<UL><LI> bluetoothadapter.o(i.BluetoothAdapter_ConfigurePipes)
</UL>
<P><STRONG><a name="[8d]"></a>EVENT_Bluetooth_ChannelStateChange</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, bluetoothcontrol.o(i.EVENT_Bluetooth_ChannelStateChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 844 + Unknown Stack Size
<LI>Call Chain = EVENT_Bluetooth_ChannelStateChange &rArr; RFCOMM_ChannelOpened &rArr; RFCOMM_SendFrame &rArr; Bluetooth_L2CAP_SendPacket &rArr; Bluetooth_HCI_SendPacket &rArr; CALLBACK_Bluetooth_SendPacket &rArr; HcdDataTransfer &rArr; QueueITDs &rArr; QueueOneITD &rArr; AllocItdForEd &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_ChannelOpened
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_ChannelClosed
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ChannelOpened
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ChannelClosed
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_NotifyHCIDisconnection
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_Manage
</UL>

<P><STRONG><a name="[80]"></a>EVENT_Bluetooth_ConnectionStateChange</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, bluetoothcontrol.o(i.EVENT_Bluetooth_ConnectionStateChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = EVENT_Bluetooth_ConnectionStateChange &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_OpenChannel
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_HCI_ProcessEventPacket
</UL>

<P><STRONG><a name="[97]"></a>EVENT_Bluetooth_DataReceived</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, bluetoothcontrol.o(i.EVENT_Bluetooth_DataReceived))
<BR><BR>[Stack]<UL><LI>Max Depth = 1324 + Unknown Stack Size
<LI>Call Chain = EVENT_Bluetooth_DataReceived &rArr; SDP_ProcessPacket &rArr; SDP_ServiceSearchAttribute &rArr; SDP_SendFrame &rArr; Bluetooth_L2CAP_SendPacket &rArr; Bluetooth_HCI_SendPacket &rArr; CALLBACK_Bluetooth_SendPacket &rArr; HcdDataTransfer &rArr; QueueITDs &rArr; QueueOneITD &rArr; AllocItdForEd &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ProcessPacket
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_ProcessPacket
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_ProcessPacket
</UL>

<P><STRONG><a name="[7a]"></a>EVENT_Bluetooth_InitComplete</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bluetoothadapter.o(i.EVENT_Bluetooth_InitComplete))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_HCI_Manage
</UL>

<P><STRONG><a name="[89]"></a>EVENT_Bluetooth_InitServices</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bluetoothcontrol.o(i.EVENT_Bluetooth_InitServices))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EVENT_Bluetooth_InitServices &rArr; RFCOMM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_Init
</UL>

<P><STRONG><a name="[9a]"></a>EVENT_Bluetooth_ManageServices</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bluetoothcontrol.o(i.EVENT_Bluetooth_ManageServices))
<BR><BR>[Stack]<UL><LI>Max Depth = 892 + Unknown Stack Size
<LI>Call Chain = EVENT_Bluetooth_ManageServices &rArr; RFCOMM_Manage &rArr; RFCOMM_SendControlFrame &rArr; RFCOMM_SendFrame &rArr; Bluetooth_L2CAP_SendPacket &rArr; Bluetooth_HCI_SendPacket &rArr; CALLBACK_Bluetooth_SendPacket &rArr; HcdDataTransfer &rArr; QueueITDs &rArr; QueueOneITD &rArr; AllocItdForEd &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_Manage
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_Manage
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_ManageConnections
</UL>

<P><STRONG><a name="[ab]"></a>EVENT_RFCOMM_ChannelStateChange</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bluetoothcontrol.o(i.EVENT_RFCOMM_ChannelStateChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = EVENT_RFCOMM_ChannelStateChange &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_Manage
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_ChannelClosed
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_ProcessDISC
</UL>

<P><STRONG><a name="[ac]"></a>EVENT_USB_Host_DeviceAttached</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bluetoothrobot.o(i.EVENT_USB_Host_DeviceAttached))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = EVENT_USB_Host_DeviceAttached &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Host_Enumerate
</UL>

<P><STRONG><a name="[ad]"></a>EVENT_USB_Host_DeviceEnumerationComplete</STRONG> (Thumb, 104 bytes, Stack size 544 bytes, bluetoothrobot.o(i.EVENT_USB_Host_DeviceEnumerationComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 796 + Unknown Stack Size
<LI>Call Chain = EVENT_USB_Host_DeviceEnumerationComplete &rArr; BluetoothAdapter_ConfigurePipes &rArr; Pipe_ConfigurePipe &rArr; HcdOpenPipe &rArr; AllocEd &rArr; AllocItdForEd &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Host_SetDeviceConfiguration
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Host_GetDeviceDescriptor
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Host_GetDeviceConfigDescriptor
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluetoothAdapter_PostConfiguration
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluetoothAdapter_ConfigurePipes
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Host_ProcessNextHostState
</UL>

<P><STRONG><a name="[b1]"></a>EVENT_USB_Host_DeviceEnumerationFailed</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, bluetoothrobot.o(i.EVENT_USB_Host_DeviceEnumerationFailed))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = EVENT_USB_Host_DeviceEnumerationFailed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Host_ProcessNextHostState
</UL>

<P><STRONG><a name="[b2]"></a>EVENT_USB_Host_DeviceUnattached</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bluetoothrobot.o(i.EVENT_USB_Host_DeviceUnattached))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = EVENT_USB_Host_DeviceUnattached &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Host_DeEnumerate
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Host_ProcessNextHostState
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b3]"></a>GPIO_ClearValue</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lpc17xx_gpio.o(i.GPIO_ClearValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led2On
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led1On
</UL>

<P><STRONG><a name="[b5]"></a>GPIO_ReadValue</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lpc17xx_gpio.o(i.GPIO_ReadValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_ReadValue
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
</UL>

<P><STRONG><a name="[b6]"></a>GPIO_SetDir</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lpc17xx_gpio.o(i.GPIO_SetDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupHardware
</UL>

<P><STRONG><a name="[b7]"></a>GPIO_SetValue</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lpc17xx_gpio.o(i.GPIO_SetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led2Off
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led1Off
</UL>

<P><STRONG><a name="[b8]"></a>GetKey</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bluetoothrobot.o(i.GetKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetKey &rArr; GPIO_ReadValue
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadValue
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScan
</UL>

<P><STRONG><a name="[127]"></a>HAL_EnableUSBInterrupt</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hal_lpc17xx.o(i.HAL_EnableUSBInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init_Host
</UL>

<P><STRONG><a name="[124]"></a>HAL_USBInit</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, hal_lpc17xx.o(i.HAL_USBInit))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
</UL>

<P><STRONG><a name="[b9]"></a>HcdCancelTransfer</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, ohci.o(i.HcdCancelTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HcdCancelTransfer &rArr; PipehandleParse
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PipehandleParse
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIsoEndpoint
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdED
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Align16
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdClosePipe
</UL>

<P><STRONG><a name="[bd]"></a>HcdClosePipe</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, ohci.o(i.HcdClosePipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HcdClosePipe &rArr; HcdCancelTransfer &rArr; PipehandleParse
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdCancelTransfer
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PipehandleParse
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIsoEndpoint
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdED
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeItd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeGtd
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pipe_ClosePipe
</UL>

<P><STRONG><a name="[c0]"></a>HcdControlTransfer</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, ohci.o(i.HcdControlTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HcdControlTransfer &rArr; QueueOneGTD &rArr; AllocGtdForEd &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForTransferComplete
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueOneGTD
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PipehandleParse
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdED
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Host_SendControlRequest
</UL>

<P><STRONG><a name="[9e]"></a>HcdDataTransfer</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, ohci.o(i.HcdDataTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = HcdDataTransfer &rArr; QueueITDs &rArr; QueueOneITD &rArr; AllocItdForEd &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueITDs
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueGTDs
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PipehandleParse
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIsoEndpoint
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdED
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pipe_IsINReceived
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pipe_Read_Stream_LE
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALLBACK_Bluetooth_SendPacket
</UL>

<P><STRONG><a name="[128]"></a>HcdDeInitDriver</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ohci.o(i.HcdDeInitDriver))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init_Host
</UL>

<P><STRONG><a name="[c5]"></a>HcdDelayMS</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hcd.o(i.HcdDelayMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HcdDelayMS
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdDelayUS
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdRhPortReset
</UL>

<P><STRONG><a name="[c6]"></a>HcdDelayUS</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hcd.o(i.HcdDelayUS))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdDelayMS
</UL>

<P><STRONG><a name="[121]"></a>HcdGetDeviceSpeed</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ohci.o(i.HcdGetDeviceSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Host_ProcessNextHostState
</UL>

<P><STRONG><a name="[e3]"></a>HcdGetFrameNumber</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ohci.o(i.HcdGetFrameNumber))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueITDs
</UL>

<P><STRONG><a name="[c7]"></a>HcdGetPipeStatus</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, ohci.o(i.HcdGetPipeStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HcdGetPipeStatus &rArr; PipehandleParse
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PipehandleParse
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdED
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pipe_WaitUntilReady
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pipe_IsINReceived
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pipe_Read_Stream_LE
</UL>

<P><STRONG><a name="[c8]"></a>HcdInitDriver</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ohci.o(i.HcdInitDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HcdInitDriver &rArr; OHciHostInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OHciHostInit
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init_Host
</UL>

<P><STRONG><a name="[ca]"></a>HcdIrqHandler</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, ohci.o(i.HcdIrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = HcdIrqHandler &rArr; OHciRhStatusChangeIsr &rArr; USB_Host_DeEnumerate &rArr; EVENT_USB_Host_DeviceUnattached &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDoneQueue
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OHciRhStatusChangeIsr
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Align16
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
</UL>

<P><STRONG><a name="[cd]"></a>HcdOpenPipe</STRONG> (Thumb, 232 bytes, Stack size 80 bytes, ohci.o(i.HcdOpenPipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = HcdOpenPipe &rArr; AllocEd &rArr; AllocItdForEd &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PipehandleCreate
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdED
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocEd
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenPipe_VerifyParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pipe_ConfigurePipe
</UL>

<P><STRONG><a name="[d0]"></a>HcdRhPortReset</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ohci.o(i.HcdRhPortReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HcdRhPortReset &rArr; HcdDelayMS
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdDelayMS
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Host_ProcessNextHostState
</UL>

<P><STRONG><a name="[d1]"></a>KeyScan</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, bluetoothrobot.o(i.KeyScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = KeyScan &rArr; GetKey &rArr; GPIO_ReadValue
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[115]"></a>LEDs_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_mcb1700.o(i.LEDs_Init))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupHardware
</UL>

<P><STRONG><a name="[d2]"></a>Led1Not</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bluetoothrobot.o(i.Led1Not))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Led1Not &rArr; Led1On &rArr; GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led1On
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led1Off
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d4]"></a>Led1Off</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bluetoothrobot.o(i.Led1Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Led1Off &rArr; GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led1Not
</UL>

<P><STRONG><a name="[d3]"></a>Led1On</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bluetoothrobot.o(i.Led1On))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Led1On &rArr; GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led1Not
</UL>

<P><STRONG><a name="[d5]"></a>Led2Off</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bluetoothrobot.o(i.Led2Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Led2Off &rArr; GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d6]"></a>Led2On</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bluetoothrobot.o(i.Led2On))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Led2On &rArr; GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ce]"></a>OpenPipe_VerifyParameters</STRONG> (Thumb, 226 bytes, Stack size 28 bytes, hcd.o(i.OpenPipe_VerifyParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = OpenPipe_VerifyParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdOpenPipe
</UL>

<P><STRONG><a name="[d9]"></a>PINSEL_ConfigPin</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lpc17xx_pinsel.o(i.PINSEL_ConfigPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = PINSEL_ConfigPin &rArr; set_ResistorMode
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ResistorMode
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PinFunc
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_OpenDrainMode
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupHardware
</UL>

<P><STRONG><a name="[dd]"></a>Pipe_ClosePipe</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, pipe_lpc.o(i.Pipe_ClosePipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Pipe_ClosePipe &rArr; HcdClosePipe &rArr; HcdCancelTransfer &rArr; PipehandleParse
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdClosePipe
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Memory_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Host_DeEnumerate
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Host_ProcessNextHostState
</UL>

<P><STRONG><a name="[6c]"></a>Pipe_ConfigurePipe</STRONG> (Thumb, 174 bytes, Stack size 64 bytes, pipe_lpc.o(i.Pipe_ConfigurePipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = Pipe_ConfigurePipe &rArr; HcdOpenPipe &rArr; AllocEd &rArr; AllocItdForEd &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdOpenPipe
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Memory_Alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Host_ProcessNextHostState
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluetoothAdapter_ConfigurePipes
</UL>

<P><STRONG><a name="[72]"></a>Pipe_IsINReceived</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, pipe_lpc.o(i.Pipe_IsINReceived))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Pipe_IsINReceived &rArr; HcdDataTransfer &rArr; QueueITDs &rArr; QueueOneITD &rArr; AllocItdForEd &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdGetPipeStatus
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdDataTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluetoothAdapter_USBTask
</UL>

<P><STRONG><a name="[73]"></a>Pipe_Read_Stream_LE</STRONG> (Thumb, 456 bytes, Stack size 32 bytes, pipestream_lpc.o(i.Pipe_Read_Stream_LE))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = Pipe_Read_Stream_LE &rArr; HcdDataTransfer &rArr; QueueITDs &rArr; QueueOneITD &rArr; AllocItdForEd &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdGetPipeStatus
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdDataTransfer
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pipe_WaitUntilReady
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluetoothAdapter_USBTask
</UL>

<P><STRONG><a name="[e0]"></a>Pipe_WaitUntilReady</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, pipe_lpc.o(i.Pipe_WaitUntilReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Pipe_WaitUntilReady &rArr; HcdGetPipeStatus &rArr; PipehandleParse
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdGetPipeStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pipe_Read_Stream_LE
</UL>

<P><STRONG><a name="[9d]"></a>Pipe_Write_Stream_LE</STRONG> (Thumb, 120 bytes, Stack size 20 bytes, pipestream_lpc.o(i.Pipe_Write_Stream_LE))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Pipe_Write_Stream_LE
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Host_SendControlRequest
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALLBACK_Bluetooth_SendPacket
</UL>

<P><STRONG><a name="[a4]"></a>RFCOMM_ChannelClosed</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, rfcomm.o(i.RFCOMM_ChannelClosed))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = RFCOMM_ChannelClosed &rArr; EVENT_RFCOMM_ChannelStateChange &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_RFCOMM_ChannelStateChange
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_Bluetooth_ChannelStateChange
</UL>

<P><STRONG><a name="[a2]"></a>RFCOMM_ChannelOpened</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, rfcomm.o(i.RFCOMM_ChannelOpened))
<BR><BR>[Stack]<UL><LI>Max Depth = 828<LI>Call Chain = RFCOMM_ChannelOpened &rArr; RFCOMM_SendFrame &rArr; Bluetooth_L2CAP_SendPacket &rArr; Bluetooth_HCI_SendPacket &rArr; CALLBACK_Bluetooth_SendPacket &rArr; HcdDataTransfer &rArr; QueueITDs &rArr; QueueOneITD &rArr; AllocItdForEd &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_SendFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_Bluetooth_ChannelStateChange
</UL>

<P><STRONG><a name="[a8]"></a>RFCOMM_Init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, rfcomm.o(i.RFCOMM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RFCOMM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_RegisterService
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_Bluetooth_InitServices
</UL>

<P><STRONG><a name="[aa]"></a>RFCOMM_Manage</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, rfcomm.o(i.RFCOMM_Manage))
<BR><BR>[Stack]<UL><LI>Max Depth = 884 + Unknown Stack Size
<LI>Call Chain = RFCOMM_Manage &rArr; RFCOMM_SendControlFrame &rArr; RFCOMM_SendFrame &rArr; Bluetooth_L2CAP_SendPacket &rArr; Bluetooth_HCI_SendPacket &rArr; CALLBACK_Bluetooth_SendPacket &rArr; HcdDataTransfer &rArr; QueueITDs &rArr; QueueOneITD &rArr; AllocItdForEd &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_RFCOMM_ChannelStateChange
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_SendControlFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_Bluetooth_ManageServices
</UL>

<P><STRONG><a name="[ec]"></a>RFCOMM_ProcessMultiplexerCommand</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, rfcomm.o(i.RFCOMM_ProcessMultiplexerCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 932 + Unknown Stack Size
<LI>Call Chain = RFCOMM_ProcessMultiplexerCommand &rArr; RFCOMM_ProcessTestCommand &rArr; RFCOMM_SendControlFrame &rArr; RFCOMM_SendFrame &rArr; Bluetooth_L2CAP_SendPacket &rArr; Bluetooth_HCI_SendPacket &rArr; CALLBACK_Bluetooth_SendPacket &rArr; HcdDataTransfer &rArr; QueueITDs &rArr; QueueOneITD &rArr; AllocItdForEd &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_SendFrame
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_ProcessTestCommand
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_ProcessRPNCommand
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_ProcessRLSCommand
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_ProcessPNCommand
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_ProcessMSCommand
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_ProcessFCECommand
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_ProcessFCDCommand
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_ProcessUIH
</UL>

<P><STRONG><a name="[a6]"></a>RFCOMM_ProcessPacket</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, rfcomm.o(i.RFCOMM_ProcessPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 996 + Unknown Stack Size
<LI>Call Chain = RFCOMM_ProcessPacket &rArr; RFCOMM_ProcessUIH &rArr; RFCOMM_ProcessMultiplexerCommand &rArr; RFCOMM_ProcessTestCommand &rArr; RFCOMM_SendControlFrame &rArr; RFCOMM_SendFrame &rArr; Bluetooth_L2CAP_SendPacket &rArr; Bluetooth_HCI_SendPacket &rArr; CALLBACK_Bluetooth_SendPacket &rArr; HcdDataTransfer &rArr; QueueITDs &rArr; QueueOneITD &rArr; AllocItdForEd &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_ProcessUIH
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_ProcessUA
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_ProcessSABM
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_ProcessDM
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_ProcessDISC
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_Bluetooth_DataReceived
</UL>

<P><STRONG><a name="[f8]"></a>RFCOMM_SendData</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, rfcomm.o(i.RFCOMM_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 828<LI>Call Chain = RFCOMM_SendData &rArr; RFCOMM_SendFrame &rArr; Bluetooth_L2CAP_SendPacket &rArr; Bluetooth_HCI_SendPacket &rArr; CALLBACK_Bluetooth_SendPacket &rArr; HcdDataTransfer &rArr; QueueITDs &rArr; QueueOneITD &rArr; AllocItdForEd &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_SendFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_send_data
</UL>

<P><STRONG><a name="[e5]"></a>RFCOMM_SendFrame</STRONG> (Thumb, 296 bytes, Stack size 40 bytes, rfcomm.o(i.RFCOMM_SendFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 804<LI>Call Chain = RFCOMM_SendFrame &rArr; Bluetooth_L2CAP_SendPacket &rArr; Bluetooth_HCI_SendPacket &rArr; CALLBACK_Bluetooth_SendPacket &rArr; HcdDataTransfer &rArr; QueueITDs &rArr; QueueOneITD &rArr; AllocItdForEd &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_ComputeFCS
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_SendPacket
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_ChannelOpened
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_SendData
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_ProcessMultiplexerCommand
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_SendControlFrame
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_ProcessUIH
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_ProcessSABM
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_ProcessRPNCommand
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_ProcessPNCommand
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_ProcessMSCommand
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_ProcessDISC
</UL>

<P><STRONG><a name="[a3]"></a>SDP_ChannelClosed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sdp.o(i.SDP_ChannelClosed))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_Bluetooth_ChannelStateChange
</UL>

<P><STRONG><a name="[a1]"></a>SDP_ChannelOpened</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sdp.o(i.SDP_ChannelOpened))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_Bluetooth_ChannelStateChange
</UL>

<P><STRONG><a name="[a7]"></a>SDP_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, sdp.o(i.SDP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDP_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_Bluetooth_InitServices
</UL>

<P><STRONG><a name="[a9]"></a>SDP_Manage</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sdp.o(i.SDP_Manage))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_Bluetooth_ManageServices
</UL>

<P><STRONG><a name="[a5]"></a>SDP_ProcessPacket</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, sdp.o(i.SDP_ProcessPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 1300<LI>Call Chain = SDP_ProcessPacket &rArr; SDP_ServiceSearchAttribute &rArr; SDP_SendFrame &rArr; Bluetooth_L2CAP_SendPacket &rArr; Bluetooth_HCI_SendPacket &rArr; CALLBACK_Bluetooth_SendPacket &rArr; HcdDataTransfer &rArr; QueueITDs &rArr; QueueOneITD &rArr; AllocItdForEd &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ServiceSearchAttribute
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ServiceSearch
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ServiceAttribute
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_Bluetooth_DataReceived
</UL>

<P><STRONG><a name="[e6]"></a>SDP_RegisterService</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sdp.o(i.SDP_RegisterService))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_Init
</UL>

<P><STRONG><a name="[117]"></a>Serial_CreateStream</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp.o(i.Serial_CreateStream))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupHardware
</UL>

<P><STRONG><a name="[10f]"></a>Serial_Init</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, bsp_mcb1700.o(i.Serial_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Serial_Init &rArr; UART_Init &rArr; uart_set_divisors &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCmd
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ConfigStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupHardware
</UL>

<P><STRONG><a name="[113]"></a>SetupHardware</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, bluetoothrobot.o(i.SetupHardware))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = SetupHardware &rArr; Serial_Init &rArr; UART_Init &rArr; uart_set_divisors &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_Init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_CreateStream
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDs_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[30]"></a>SystemInit</STRONG> (Thumb, 282 bytes, Stack size 0 bytes, system_lpc17xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(.text)
</UL>
<P><STRONG><a name="[f]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, bsp_mcb1700.o(i.TIMER1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_UpdateValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[110]"></a>UART_ConfigStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc17xx_uart.o(i.UART_ConfigStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_Init
</UL>

<P><STRONG><a name="[111]"></a>UART_Init</STRONG> (Thumb, 358 bytes, Stack size 16 bytes, lpc17xx_uart.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = UART_Init &rArr; uart_set_divisors &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_divisors
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_Init
</UL>

<P><STRONG><a name="[11b]"></a>UART_Send</STRONG> (Thumb, 146 bytes, Stack size 36 bytes, lpc17xx_uart.o(i.UART_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[11c]"></a>UART_SendByte</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lpc17xx_uart.o(i.UART_SendByte))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
</UL>

<P><STRONG><a name="[112]"></a>UART_TxCmd</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, lpc17xx_uart.o(i.UART_TxCmd))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_Init
</UL>

<P><STRONG><a name="[6b]"></a>USB_GetNextDescriptorComp</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, configdescriptor.o(i.USB_GetNextDescriptorComp))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_GetNextDescriptorComp
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetNextDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluetoothAdapter_ConfigurePipes
</UL>

<P><STRONG><a name="[6a]"></a>USB_GetNextDescriptorOfType</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, configdescriptor.o(i.USB_GetNextDescriptorOfType))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_GetNextDescriptorOfType
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetNextDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluetoothAdapter_ConfigurePipes
</UL>

<P><STRONG><a name="[d8]"></a>USB_Host_DeEnumerate</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, host_lpc.o(i.USB_Host_DeEnumerate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = USB_Host_DeEnumerate &rArr; EVENT_USB_Host_DeviceUnattached &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pipe_ClosePipe
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_USB_Host_DeviceUnattached
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OHciRhStatusChangeIsr
</UL>

<P><STRONG><a name="[d7]"></a>USB_Host_Enumerate</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, host_lpc.o(i.USB_Host_Enumerate))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = USB_Host_Enumerate &rArr; EVENT_USB_Host_DeviceAttached &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_USB_Host_DeviceAttached
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OHciRhStatusChangeIsr
</UL>

<P><STRONG><a name="[af]"></a>USB_Host_GetDeviceConfigDescriptor</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, configdescriptor.o(i.USB_Host_GetDeviceConfigDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = USB_Host_GetDeviceConfigDescriptor &rArr; USB_Host_SendControlRequest &rArr; HcdControlTransfer &rArr; QueueOneGTD &rArr; AllocGtdForEd &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Host_SendControlRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_USB_Host_DeviceEnumerationComplete
</UL>

<P><STRONG><a name="[ae]"></a>USB_Host_GetDeviceDescriptor</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, hoststandardreq.o(i.USB_Host_GetDeviceDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = USB_Host_GetDeviceDescriptor &rArr; USB_Host_SendControlRequest &rArr; HcdControlTransfer &rArr; QueueOneGTD &rArr; AllocGtdForEd &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Host_SendControlRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_USB_Host_DeviceEnumerationComplete
</UL>

<P><STRONG><a name="[11f]"></a>USB_Host_ProcessNextHostState</STRONG> (Thumb, 530 bytes, Stack size 48 bytes, host_lpc.o(i.USB_Host_ProcessNextHostState))
<BR><BR>[Stack]<UL><LI>Max Depth = 844 + Unknown Stack Size
<LI>Call Chain = USB_Host_ProcessNextHostState &rArr; EVENT_USB_Host_DeviceEnumerationComplete &rArr; BluetoothAdapter_ConfigurePipes &rArr; Pipe_ConfigurePipe &rArr; HcdOpenPipe &rArr; AllocEd &rArr; AllocItdForEd &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetInterface
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pipe_ConfigurePipe
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pipe_ClosePipe
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdRhPortReset
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdGetDeviceSpeed
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Host_WaitMS
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Host_SetDeviceSpeed
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Host_SendControlRequest
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_USB_Host_DeviceUnattached
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_USB_Host_DeviceEnumerationFailed
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_USB_Host_DeviceEnumerationComplete
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostTask
</UL>

<P><STRONG><a name="[9c]"></a>USB_Host_SendControlRequest</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, hoststandardreq.o(i.USB_Host_SendControlRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USB_Host_SendControlRequest &rArr; HcdControlTransfer &rArr; QueueOneGTD &rArr; AllocGtdForEd &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pipe_Write_Stream_LE
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdControlTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Host_ProcessNextHostState
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Host_SetDeviceConfiguration
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Host_GetDeviceDescriptor
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Host_GetDeviceConfigDescriptor
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALLBACK_Bluetooth_SendPacket
</UL>

<P><STRONG><a name="[b0]"></a>USB_Host_SetDeviceConfiguration</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, hoststandardreq.o(i.USB_Host_SetDeviceConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = USB_Host_SetDeviceConfiguration &rArr; USB_Host_SendControlRequest &rArr; HcdControlTransfer &rArr; QueueOneGTD &rArr; AllocGtdForEd &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Host_SendControlRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_USB_Host_DeviceEnumerationComplete
</UL>

<P><STRONG><a name="[122]"></a>USB_Host_SetDeviceSpeed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, host_lpc.o(i.USB_Host_SetDeviceSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Host_ProcessNextHostState
</UL>

<P><STRONG><a name="[120]"></a>USB_Host_WaitMS</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, host_lpc.o(i.USB_Host_WaitMS))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Host_ProcessNextHostState
</UL>

<P><STRONG><a name="[25]"></a>USB_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hal_lpc17xx.o(i.USB_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = USB_IRQHandler &rArr; HcdIrqHandler &rArr; OHciRhStatusChangeIsr &rArr; USB_Host_DeEnumerate &rArr; EVENT_USB_Host_DeviceUnattached &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdIrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[116]"></a>USB_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbcontroller_lpc.o(i.USB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USB_Init &rArr; USB_ResetInterface &rArr; USB_Init_Host &rArr; HcdInitDriver &rArr; OHciHostInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetInterface
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_USBInit
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupHardware
</UL>

<P><STRONG><a name="[df]"></a>USB_Memory_Alloc</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, usbmemory.o(i.USB_Memory_Alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_Memory_Alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pipe_ConfigurePipe
</UL>

<P><STRONG><a name="[de]"></a>USB_Memory_Free</STRONG> (Thumb, 212 bytes, Stack size 12 bytes, usbmemory.o(i.USB_Memory_Free))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_Memory_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pipe_ClosePipe
</UL>

<P><STRONG><a name="[126]"></a>USB_Memory_Init</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usbmemory.o(i.USB_Memory_Init))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init_Host
</UL>

<P><STRONG><a name="[123]"></a>USB_ResetInterface</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usbcontroller_lpc.o(i.USB_ResetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USB_ResetInterface &rArr; USB_Init_Host &rArr; HcdInitDriver &rArr; OHciHostInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init_Host
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Host_ProcessNextHostState
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
</UL>

<P><STRONG><a name="[129]"></a>USB_USBTask</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usbtask.o(i.USB_USBTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 860 + Unknown Stack Size
<LI>Call Chain = USB_USBTask &rArr; USB_HostTask &rArr; USB_Host_ProcessNextHostState &rArr; EVENT_USB_Host_DeviceEnumerationComplete &rArr; BluetoothAdapter_ConfigurePipes &rArr; Pipe_ConfigurePipe &rArr; HcdOpenPipe &rArr; AllocEd &rArr; AllocItdForEd &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostTask
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[52]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[4a]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[5e]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp.o(i.ferror))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[32]"></a>fputc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, bsp.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = fputc &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[114]"></a>init_timer</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, bluetoothrobot.o(i.init_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupHardware
</UL>

<P><STRONG><a name="[45]"></a>main</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, bluetoothrobot.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1404 + Unknown Stack Size
<LI>Call Chain = main &rArr; BluetoothAdapter_USBTask &rArr; Bluetooth_ProcessPacket &rArr; Bluetooth_HCI_ProcessDataPacket &rArr; Bluetooth_L2CAP_ProcessPacket &rArr; EVENT_Bluetooth_DataReceived &rArr; SDP_ProcessPacket &rArr; SDP_ServiceSearchAttribute &rArr; SDP_SendFrame &rArr; Bluetooth_L2CAP_SendPacket &rArr; Bluetooth_HCI_SendPacket &rArr; CALLBACK_Bluetooth_SendPacket &rArr; HcdDataTransfer &rArr; QueueITDs &rArr; QueueOneITD &rArr; AllocItdForEd &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_USBTask
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluetoothAdapter_USBTask
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluetoothAdapter_TickElapsed
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcomm_send_data
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupHardware
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led2On
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led2Off
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led1On
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led1Off
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led1Not
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScan
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_USB_Host_DeviceUnattached
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[12b]"></a>rfcomm_send_data</STRONG> (Thumb, 68 bytes, Stack size 208 bytes, bluetoothrobot.o(i.rfcomm_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 1036<LI>Call Chain = rfcomm_send_data &rArr; RFCOMM_SendData &rArr; RFCOMM_SendFrame &rArr; Bluetooth_L2CAP_SendPacket &rArr; Bluetooth_HCI_SendPacket &rArr; CALLBACK_Bluetooth_SendPacket &rArr; HcdDataTransfer &rArr; QueueITDs &rArr; QueueOneITD &rArr; AllocItdForEd &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[40]"></a>_fp_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_fp_status_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[169]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[11d]"></a>USB_GetNextDescriptor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, configdescriptor.o(i.USB_GetNextDescriptor))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetNextDescriptorOfType
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetNextDescriptorComp
</UL>

<P><STRONG><a name="[11e]"></a>USB_HostTask</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbtask.o(i.USB_HostTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 852 + Unknown Stack Size
<LI>Call Chain = USB_HostTask &rArr; USB_Host_ProcessNextHostState &rArr; EVENT_USB_Host_DeviceEnumerationComplete &rArr; BluetoothAdapter_ConfigurePipes &rArr; Pipe_ConfigurePipe &rArr; HcdOpenPipe &rArr; AllocEd &rArr; AllocItdForEd &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Host_ProcessNextHostState
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_USBTask
</UL>

<P><STRONG><a name="[125]"></a>USB_Init_Host</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, usbcontroller_lpc.o(i.USB_Init_Host))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USB_Init_Host &rArr; HcdInitDriver &rArr; OHciHostInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Memory_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdInitDriver
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdDeInitDriver
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EnableUSBInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetInterface
</UL>

<P><STRONG><a name="[bb]"></a>Align16</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ohci.o(i.Align16))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdCancelTransfer
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueOneITD
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdIrqHandler
</UL>

<P><STRONG><a name="[e1]"></a>Align4k</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ohci.o(i.Align4k))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueOneITD
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDoneQueue
</UL>

<P><STRONG><a name="[62]"></a>AllocEd</STRONG> (Thumb, 370 bytes, Stack size 40 bytes, ohci.o(i.AllocEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = AllocEd &rArr; AllocItdForEd &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdED
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocItdForEd
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocGtdForEd
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdOpenPipe
</UL>

<P><STRONG><a name="[65]"></a>AllocGtdForEd</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, ohci.o(i.AllocGtdForEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = AllocGtdForEd &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdGTD
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdED
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueOneGTD
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocEd
</UL>

<P><STRONG><a name="[66]"></a>AllocItdForEd</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, ohci.o(i.AllocItdForEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = AllocItdForEd &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdITD
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdED
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueOneITD
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocEd
</UL>

<P><STRONG><a name="[bf]"></a>FreeGtd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ohci.o(i.FreeGtd))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdClosePipe
</UL>

<P><STRONG><a name="[be]"></a>FreeItd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ohci.o(i.FreeItd))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdClosePipe
</UL>

<P><STRONG><a name="[63]"></a>HcdED</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ohci.o(i.HcdED))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdOpenPipe
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdGetPipeStatus
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdDataTransfer
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdClosePipe
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdControlTransfer
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdCancelTransfer
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForTransferComplete
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueOneITD
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueOneGTD
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueITDs
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDoneQueue
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PipehandleParse
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIsoEndpoint
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocItdForEd
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocGtdForEd
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocEd
</UL>

<P><STRONG><a name="[67]"></a>HcdGTD</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ohci.o(i.HcdGTD))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocGtdForEd
</UL>

<P><STRONG><a name="[68]"></a>HcdITD</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ohci.o(i.HcdITD))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDoneQueue
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocItdForEd
</UL>

<P><STRONG><a name="[bc]"></a>IsIsoEndpoint</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ohci.o(i.IsIsoEndpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsIsoEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdED
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdDataTransfer
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdClosePipe
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdCancelTransfer
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDoneQueue
</UL>

<P><STRONG><a name="[c9]"></a>OHciHostInit</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, ohci.o(i.OHciHostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OHciHostInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdInitDriver
</UL>

<P><STRONG><a name="[cb]"></a>OHciRhStatusChangeIsr</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ohci.o(i.OHciRhStatusChangeIsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = OHciRhStatusChangeIsr &rArr; USB_Host_DeEnumerate &rArr; EVENT_USB_Host_DeviceUnattached &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Host_Enumerate
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Host_DeEnumerate
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdIrqHandler
</UL>

<P><STRONG><a name="[e2]"></a>Offset4k</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ohci.o(i.Offset4k))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueOneITD
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueITDs
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueGTDs
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDoneQueue
</UL>

<P><STRONG><a name="[cf]"></a>PipehandleCreate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ohci.o(i.PipehandleCreate))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdOpenPipe
</UL>

<P><STRONG><a name="[ba]"></a>PipehandleParse</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ohci.o(i.PipehandleParse))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PipehandleParse
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdED
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdGetPipeStatus
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdDataTransfer
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdClosePipe
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdControlTransfer
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdCancelTransfer
</UL>

<P><STRONG><a name="[cc]"></a>ProcessDoneQueue</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, ohci.o(i.ProcessDoneQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ProcessDoneQueue &rArr; IsIsoEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Offset4k
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIsoEndpoint
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdITD
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdED
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Align4k
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdIrqHandler
</UL>

<P><STRONG><a name="[c4]"></a>QueueGTDs</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, ohci.o(i.QueueGTDs))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = QueueGTDs &rArr; QueueOneGTD &rArr; AllocGtdForEd &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueOneGTD
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Offset4k
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdDataTransfer
</UL>

<P><STRONG><a name="[c3]"></a>QueueITDs</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, ohci.o(i.QueueITDs))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = QueueITDs &rArr; QueueOneITD &rArr; AllocItdForEd &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdGetFrameNumber
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueOneITD
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Offset4k
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdED
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdDataTransfer
</UL>

<P><STRONG><a name="[c1]"></a>QueueOneGTD</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, ohci.o(i.QueueOneGTD))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = QueueOneGTD &rArr; AllocGtdForEd &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdED
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocGtdForEd
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdControlTransfer
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueGTDs
</UL>

<P><STRONG><a name="[e4]"></a>QueueOneITD</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, ohci.o(i.QueueOneITD))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = QueueOneITD &rArr; AllocItdForEd &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Offset4k
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdED
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocItdForEd
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Align4k
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Align16
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueITDs
</UL>

<P><STRONG><a name="[c2]"></a>WaitForTransferComplete</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ohci.o(i.WaitForTransferComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WaitForTransferComplete
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdED
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HcdControlTransfer
</UL>

<P><STRONG><a name="[12a]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bluetoothrobot.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer
</UL>

<P><STRONG><a name="[7e]"></a>Bluetooth_HCI_NewConnection</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, bluetoothhci.o(i.Bluetooth_HCI_NewConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Bluetooth_HCI_NewConnection
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_HCI_ProcessEventPacket
</UL>

<P><STRONG><a name="[91]"></a>Bluetooth_L2CAP_NewChannel</STRONG> (Thumb, 114 bytes, Stack size 20 bytes, bluetoothl2cap.o(i.Bluetooth_L2CAP_NewChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Bluetooth_L2CAP_NewChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_OpenChannel
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_Signal_ConnectReq
</UL>

<P><STRONG><a name="[8f]"></a>Bluetooth_L2CAP_NewEvent</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bluetoothl2cap.o(i.Bluetooth_L2CAP_NewEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Bluetooth_L2CAP_NewEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_OpenChannel
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_Signal_DisconnectRsp
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_Signal_ConnectRsp
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_Signal_ConnectReq
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_Signal_ConfigRsp
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_Signal_ConfigReq
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_ProcessPacket
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_Manage
</UL>

<P><STRONG><a name="[8c]"></a>Bluetooth_L2CAP_SendSignalPacket</STRONG> (Thumb, 96 bytes, Stack size 304 bytes, bluetoothl2cap.o(i.Bluetooth_L2CAP_SendSignalPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 1068<LI>Call Chain = Bluetooth_L2CAP_SendSignalPacket &rArr; Bluetooth_L2CAP_SendPacket &rArr; Bluetooth_HCI_SendPacket &rArr; CALLBACK_Bluetooth_SendPacket &rArr; HcdDataTransfer &rArr; QueueITDs &rArr; QueueOneITD &rArr; AllocItdForEd &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_SendPacket
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_Manage
</UL>

<P><STRONG><a name="[94]"></a>Bluetooth_L2CAP_Signal_ConfigReq</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, bluetoothl2cap.o(i.Bluetooth_L2CAP_Signal_ConfigReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Bluetooth_L2CAP_Signal_ConfigReq &rArr; Bluetooth_L2CAP_FindChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_FindChannel
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_NewEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_ProcessPacket
</UL>

<P><STRONG><a name="[95]"></a>Bluetooth_L2CAP_Signal_ConfigRsp</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, bluetoothl2cap.o(i.Bluetooth_L2CAP_Signal_ConfigRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Bluetooth_L2CAP_Signal_ConfigRsp &rArr; Bluetooth_L2CAP_FindChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_FindChannel
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_NewEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_ProcessPacket
</UL>

<P><STRONG><a name="[92]"></a>Bluetooth_L2CAP_Signal_ConnectReq</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, bluetoothl2cap.o(i.Bluetooth_L2CAP_Signal_ConnectReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = Bluetooth_L2CAP_Signal_ConnectReq &rArr; CALLBACK_Bluetooth_ChannelRequest &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALLBACK_Bluetooth_ChannelRequest
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_NewEvent
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_NewChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_ProcessPacket
</UL>

<P><STRONG><a name="[93]"></a>Bluetooth_L2CAP_Signal_ConnectRsp</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, bluetoothl2cap.o(i.Bluetooth_L2CAP_Signal_ConnectRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Bluetooth_L2CAP_Signal_ConnectRsp &rArr; Bluetooth_L2CAP_FindChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_FindChannel
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_NewEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_ProcessPacket
</UL>

<P><STRONG><a name="[96]"></a>Bluetooth_L2CAP_Signal_DisconnectRsp</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, bluetoothl2cap.o(i.Bluetooth_L2CAP_Signal_DisconnectRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Bluetooth_L2CAP_Signal_DisconnectRsp &rArr; Bluetooth_L2CAP_FindChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_FindChannel
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_NewEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_ProcessPacket
</UL>

<P><STRONG><a name="[fa]"></a>SDP_AddAttributeToResponse</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, sdp.o(i.SDP_AddAttributeToResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SDP_AddAttributeToResponse &rArr; SDP_GetLocalAttributeContainerSize &rArr; SwapEndian_32
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_WriteData8
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_WriteData16
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_GetLocalAttributeContainerSize
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_AddListedAttributesToResponse
</UL>

<P><STRONG><a name="[fe]"></a>SDP_AddListedAttributesToResponse</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, sdp.o(i.SDP_AddListedAttributesToResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SDP_AddListedAttributesToResponse &rArr; SDP_AddAttributeToResponse &rArr; SDP_GetLocalAttributeContainerSize &rArr; SwapEndian_32
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwapEndian_16
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_WriteSequenceHeader16
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_AddAttributeToResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ServiceSearchAttribute
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ServiceAttribute
</UL>

<P><STRONG><a name="[101]"></a>SDP_CheckUUIDMatch</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, sdp.o(i.SDP_CheckUUIDMatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + In Cycle
<LI>Call Chain = SDP_CheckUUIDMatch &rArr;  SDP_CheckUUIDMatch (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_GetLocalAttributeContainerSize
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_CheckUUIDMatch
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_SearchServiceTable
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_CheckUUIDMatch
</UL>

<P><STRONG><a name="[102]"></a>SDP_GetAttributeList</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, sdp.o(i.SDP_GetAttributeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SDP_GetAttributeList &rArr; SDP_GetDataElementSize &rArr; SDP_ReadData32 &rArr; SwapEndian_32
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwapEndian_16
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_GetDataElementSize
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ServiceSearchAttribute
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ServiceAttribute
</UL>

<P><STRONG><a name="[10e]"></a>SDP_GetAttributeValue</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, sdp.o(i.SDP_GetAttributeValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDP_GetAttributeValue
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ServiceSearch
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ServiceAttribute
</UL>

<P><STRONG><a name="[103]"></a>SDP_GetDataElementSize</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, sdp.o(i.SDP_GetDataElementSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDP_GetDataElementSize &rArr; SDP_ReadData32 &rArr; SwapEndian_32
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ReadData8
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ReadData32
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ReadData16
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_GetUUIDList
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_GetAttributeList
</UL>

<P><STRONG><a name="[fb]"></a>SDP_GetLocalAttributeContainerSize</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, sdp.o(i.SDP_GetLocalAttributeContainerSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SDP_GetLocalAttributeContainerSize &rArr; SwapEndian_32
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwapEndian_32
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwapEndian_16
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ServiceSearch
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ServiceAttribute
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_CheckUUIDMatch
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_AddAttributeToResponse
</UL>

<P><STRONG><a name="[108]"></a>SDP_GetUUIDList</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, sdp.o(i.SDP_GetUUIDList))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SDP_GetUUIDList &rArr; SDP_GetDataElementSize &rArr; SDP_ReadData32 &rArr; SwapEndian_32
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_GetDataElementSize
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ServiceSearchAttribute
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ServiceSearch
</UL>

<P><STRONG><a name="[105]"></a>SDP_ReadData16</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sdp.o(i.SDP_ReadData16))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SDP_ReadData16 &rArr; SwapEndian_16
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwapEndian_16
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ServiceSearchAttribute
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ServiceSearch
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ServiceAttribute
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_GetDataElementSize
</UL>

<P><STRONG><a name="[106]"></a>SDP_ReadData32</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sdp.o(i.SDP_ReadData32))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SDP_ReadData32 &rArr; SwapEndian_32
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwapEndian_32
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ServiceAttribute
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_GetDataElementSize
</UL>

<P><STRONG><a name="[104]"></a>SDP_ReadData8</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sdp.o(i.SDP_ReadData8))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ServiceSearchAttribute
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ServiceSearch
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ServiceAttribute
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_GetDataElementSize
</UL>

<P><STRONG><a name="[10c]"></a>SDP_SearchServiceTable</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, sdp.o(i.SDP_SearchServiceTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SDP_SearchServiceTable &rArr; SDP_CheckUUIDMatch &rArr;  SDP_CheckUUIDMatch (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_CheckUUIDMatch
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ServiceSearchAttribute
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ServiceSearch
</UL>

<P><STRONG><a name="[10d]"></a>SDP_SendFrame</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, sdp.o(i.SDP_SendFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 788<LI>Call Chain = SDP_SendFrame &rArr; Bluetooth_L2CAP_SendPacket &rArr; Bluetooth_HCI_SendPacket &rArr; CALLBACK_Bluetooth_SendPacket &rArr; HcdDataTransfer &rArr; QueueITDs &rArr; QueueOneITD &rArr; AllocItdForEd &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bluetooth_L2CAP_SendPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ServiceSearchAttribute
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ServiceSearch
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ServiceAttribute
</UL>

<P><STRONG><a name="[10a]"></a>SDP_ServiceAttribute</STRONG> (Thumb, 230 bytes, Stack size 296 bytes, sdp.o(i.SDP_ServiceAttribute))
<BR><BR>[Stack]<UL><LI>Max Depth = 1084<LI>Call Chain = SDP_ServiceAttribute &rArr; SDP_SendFrame &rArr; Bluetooth_L2CAP_SendPacket &rArr; Bluetooth_HCI_SendPacket &rArr; CALLBACK_Bluetooth_SendPacket &rArr; HcdDataTransfer &rArr; QueueITDs &rArr; QueueOneITD &rArr; AllocItdForEd &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwapEndian_32
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwapEndian_16
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_WriteData8
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_SendFrame
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ReadData8
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ReadData32
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ReadData16
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_GetLocalAttributeContainerSize
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_GetAttributeValue
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_GetAttributeList
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_AddListedAttributesToResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ProcessPacket
</UL>

<P><STRONG><a name="[109]"></a>SDP_ServiceSearch</STRONG> (Thumb, 244 bytes, Stack size 464 bytes, sdp.o(i.SDP_ServiceSearch))
<BR><BR>[Stack]<UL><LI>Max Depth = 1252<LI>Call Chain = SDP_ServiceSearch &rArr; SDP_SendFrame &rArr; Bluetooth_L2CAP_SendPacket &rArr; Bluetooth_HCI_SendPacket &rArr; CALLBACK_Bluetooth_SendPacket &rArr; HcdDataTransfer &rArr; QueueITDs &rArr; QueueOneITD &rArr; AllocItdForEd &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwapEndian_16
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_WriteData8
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_SendFrame
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_SearchServiceTable
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ReadData8
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ReadData16
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_GetUUIDList
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_GetLocalAttributeContainerSize
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_GetAttributeValue
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ProcessPacket
</UL>

<P><STRONG><a name="[10b]"></a>SDP_ServiceSearchAttribute</STRONG> (Thumb, 224 bytes, Stack size 488 bytes, sdp.o(i.SDP_ServiceSearchAttribute))
<BR><BR>[Stack]<UL><LI>Max Depth = 1276<LI>Call Chain = SDP_ServiceSearchAttribute &rArr; SDP_SendFrame &rArr; Bluetooth_L2CAP_SendPacket &rArr; Bluetooth_HCI_SendPacket &rArr; CALLBACK_Bluetooth_SendPacket &rArr; HcdDataTransfer &rArr; QueueITDs &rArr; QueueOneITD &rArr; AllocItdForEd &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwapEndian_16
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_WriteSequenceHeader16
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_WriteData8
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_SendFrame
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_SearchServiceTable
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ReadData8
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ReadData16
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_GetUUIDList
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_GetAttributeList
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_AddListedAttributesToResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ProcessPacket
</UL>

<P><STRONG><a name="[fd]"></a>SDP_WriteData16</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sdp.o(i.SDP_WriteData16))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SDP_WriteData16 &rArr; SwapEndian_16
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwapEndian_16
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_WriteSequenceHeader16
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_AddAttributeToResponse
</UL>

<P><STRONG><a name="[fc]"></a>SDP_WriteData8</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sdp.o(i.SDP_WriteData8))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_WriteSequenceHeader16
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ServiceSearchAttribute
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ServiceSearch
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ServiceAttribute
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_AddAttributeToResponse
</UL>

<P><STRONG><a name="[ff]"></a>SDP_WriteSequenceHeader16</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, sdp.o(i.SDP_WriteSequenceHeader16))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SDP_WriteSequenceHeader16 &rArr; SDP_WriteData16 &rArr; SwapEndian_16
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_WriteData8
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_WriteData16
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ServiceSearchAttribute
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_AddListedAttributesToResponse
</UL>

<P><STRONG><a name="[100]"></a>SwapEndian_16</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sdp.o(i.SwapEndian_16))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SwapEndian_16
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_WriteData16
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ServiceSearchAttribute
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ServiceSearch
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ServiceAttribute
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ReadData16
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_GetLocalAttributeContainerSize
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_GetAttributeList
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_AddListedAttributesToResponse
</UL>

<P><STRONG><a name="[107]"></a>SwapEndian_32</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sdp.o(i.SwapEndian_32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SwapEndian_32
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ServiceAttribute
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ReadData32
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_GetLocalAttributeContainerSize
</UL>

<P><STRONG><a name="[f9]"></a>RFCOMM_ComputeFCS</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, rfcomm.o(i.RFCOMM_ComputeFCS))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RFCOMM_ComputeFCS
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_SendFrame
</UL>

<P><STRONG><a name="[e9]"></a>RFCOMM_FindChannel</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, rfcomm.o(i.RFCOMM_FindChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RFCOMM_FindChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_ProcessUIH
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_ProcessSABM
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_ProcessRPNCommand
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_ProcessPNCommand
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_ProcessMSCommand
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_ProcessDM
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_ProcessDISC
</UL>

<P><STRONG><a name="[f3]"></a>RFCOMM_NewChannel</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, rfcomm.o(i.RFCOMM_NewChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RFCOMM_NewChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_ProcessSABM
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_ProcessPNCommand
</UL>

<P><STRONG><a name="[e8]"></a>RFCOMM_ProcessDISC</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, rfcomm.o(i.RFCOMM_ProcessDISC))
<BR><BR>[Stack]<UL><LI>Max Depth = 844 + Unknown Stack Size
<LI>Call Chain = RFCOMM_ProcessDISC &rArr; RFCOMM_SendFrame &rArr; Bluetooth_L2CAP_SendPacket &rArr; Bluetooth_HCI_SendPacket &rArr; CALLBACK_Bluetooth_SendPacket &rArr; HcdDataTransfer &rArr; QueueITDs &rArr; QueueOneITD &rArr; AllocItdForEd &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVENT_RFCOMM_ChannelStateChange
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_SendFrame
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_FindChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_ProcessPacket
</UL>

<P><STRONG><a name="[ea]"></a>RFCOMM_ProcessDM</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, rfcomm.o(i.RFCOMM_ProcessDM))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RFCOMM_ProcessDM &rArr; RFCOMM_FindChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_FindChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_ProcessPacket
</UL>

<P><STRONG><a name="[ef]"></a>RFCOMM_ProcessFCDCommand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rfcomm.o(i.RFCOMM_ProcessFCDCommand))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_ProcessMultiplexerCommand
</UL>

<P><STRONG><a name="[ee]"></a>RFCOMM_ProcessFCECommand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rfcomm.o(i.RFCOMM_ProcessFCECommand))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_ProcessMultiplexerCommand
</UL>

<P><STRONG><a name="[eb]"></a>RFCOMM_ProcessMSCommand</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, rfcomm.o(i.RFCOMM_ProcessMSCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 892 + Unknown Stack Size
<LI>Call Chain = RFCOMM_ProcessMSCommand &rArr; RFCOMM_SendControlFrame &rArr; RFCOMM_SendFrame &rArr; Bluetooth_L2CAP_SendPacket &rArr; Bluetooth_HCI_SendPacket &rArr; CALLBACK_Bluetooth_SendPacket &rArr; HcdDataTransfer &rArr; QueueITDs &rArr; QueueOneITD &rArr; AllocItdForEd &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_SendFrame
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_SendControlFrame
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_FindChannel
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_ProcessMultiplexerCommand
</UL>

<P><STRONG><a name="[f2]"></a>RFCOMM_ProcessPNCommand</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, rfcomm.o(i.RFCOMM_ProcessPNCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 892 + Unknown Stack Size
<LI>Call Chain = RFCOMM_ProcessPNCommand &rArr; RFCOMM_SendControlFrame &rArr; RFCOMM_SendFrame &rArr; Bluetooth_L2CAP_SendPacket &rArr; Bluetooth_HCI_SendPacket &rArr; CALLBACK_Bluetooth_SendPacket &rArr; HcdDataTransfer &rArr; QueueITDs &rArr; QueueOneITD &rArr; AllocItdForEd &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_SendFrame
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_SendControlFrame
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_NewChannel
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_FindChannel
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_ProcessMultiplexerCommand
</UL>

<P><STRONG><a name="[f1]"></a>RFCOMM_ProcessRLSCommand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rfcomm.o(i.RFCOMM_ProcessRLSCommand))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_ProcessMultiplexerCommand
</UL>

<P><STRONG><a name="[f0]"></a>RFCOMM_ProcessRPNCommand</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, rfcomm.o(i.RFCOMM_ProcessRPNCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 892<LI>Call Chain = RFCOMM_ProcessRPNCommand &rArr; RFCOMM_SendControlFrame &rArr; RFCOMM_SendFrame &rArr; Bluetooth_L2CAP_SendPacket &rArr; Bluetooth_HCI_SendPacket &rArr; CALLBACK_Bluetooth_SendPacket &rArr; HcdDataTransfer &rArr; QueueITDs &rArr; QueueOneITD &rArr; AllocItdForEd &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_SendFrame
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_SendControlFrame
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_FindChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_ProcessMultiplexerCommand
</UL>

<P><STRONG><a name="[f4]"></a>RFCOMM_ProcessSABM</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, rfcomm.o(i.RFCOMM_ProcessSABM))
<BR><BR>[Stack]<UL><LI>Max Depth = 836 + Unknown Stack Size
<LI>Call Chain = RFCOMM_ProcessSABM &rArr; RFCOMM_SendFrame &rArr; Bluetooth_L2CAP_SendPacket &rArr; Bluetooth_HCI_SendPacket &rArr; CALLBACK_Bluetooth_SendPacket &rArr; HcdDataTransfer &rArr; QueueITDs &rArr; QueueOneITD &rArr; AllocItdForEd &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_SendFrame
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_NewChannel
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_FindChannel
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_ProcessPacket
</UL>

<P><STRONG><a name="[ed]"></a>RFCOMM_ProcessTestCommand</STRONG> (Thumb, 34 bytes, Stack size 48 bytes, rfcomm.o(i.RFCOMM_ProcessTestCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 900<LI>Call Chain = RFCOMM_ProcessTestCommand &rArr; RFCOMM_SendControlFrame &rArr; RFCOMM_SendFrame &rArr; Bluetooth_L2CAP_SendPacket &rArr; Bluetooth_HCI_SendPacket &rArr; CALLBACK_Bluetooth_SendPacket &rArr; HcdDataTransfer &rArr; QueueITDs &rArr; QueueOneITD &rArr; AllocItdForEd &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_SendControlFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_ProcessMultiplexerCommand
</UL>

<P><STRONG><a name="[f5]"></a>RFCOMM_ProcessUA</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rfcomm.o(i.RFCOMM_ProcessUA))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_ProcessPacket
</UL>

<P><STRONG><a name="[f6]"></a>RFCOMM_ProcessUIH</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, rfcomm.o(i.RFCOMM_ProcessUIH))
<BR><BR>[Stack]<UL><LI>Max Depth = 972 + Unknown Stack Size
<LI>Call Chain = RFCOMM_ProcessUIH &rArr; RFCOMM_ProcessMultiplexerCommand &rArr; RFCOMM_ProcessTestCommand &rArr; RFCOMM_SendControlFrame &rArr; RFCOMM_SendFrame &rArr; Bluetooth_L2CAP_SendPacket &rArr; Bluetooth_HCI_SendPacket &rArr; CALLBACK_Bluetooth_SendPacket &rArr; HcdDataTransfer &rArr; QueueITDs &rArr; QueueOneITD &rArr; AllocItdForEd &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALLBACK_RFCOMM_DataReceived
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_SendFrame
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_ProcessMultiplexerCommand
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_FindChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_ProcessPacket
</UL>

<P><STRONG><a name="[e7]"></a>RFCOMM_SendControlFrame</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, rfcomm.o(i.RFCOMM_SendControlFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 852<LI>Call Chain = RFCOMM_SendControlFrame &rArr; RFCOMM_SendFrame &rArr; Bluetooth_L2CAP_SendPacket &rArr; Bluetooth_HCI_SendPacket &rArr; CALLBACK_Bluetooth_SendPacket &rArr; HcdDataTransfer &rArr; QueueITDs &rArr; QueueOneITD &rArr; AllocItdForEd &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_SendFrame
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_Manage
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_ProcessTestCommand
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_ProcessRPNCommand
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_ProcessPNCommand
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCOMM_ProcessMSCommand
</UL>

<P><STRONG><a name="[b4]"></a>GPIO_GetPointer</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lpc17xx_gpio.o(i.GPIO_GetPointer))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadValue
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
</UL>

<P><STRONG><a name="[dc]"></a>set_OpenDrainMode</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, lpc17xx_pinsel.o(i.set_OpenDrainMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = set_OpenDrainMode
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
</UL>

<P><STRONG><a name="[da]"></a>set_PinFunc</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, lpc17xx_pinsel.o(i.set_PinFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = set_PinFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
</UL>

<P><STRONG><a name="[db]"></a>set_ResistorMode</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, lpc17xx_pinsel.o(i.set_ResistorMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = set_ResistorMode
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
</UL>

<P><STRONG><a name="[11a]"></a>uart_set_divisors</STRONG> (Thumb, 532 bytes, Stack size 112 bytes, lpc17xx_uart.o(i.uart_set_divisors))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = uart_set_divisors &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetPCLK
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[33]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
